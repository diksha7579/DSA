//686. Repeated String Match//
//Leetcode Problem-686//

class Solution {
public:
    void lpsfind(vector<int>& lps, const string& s) {
        int pre = 0, suff = 1;
        while (suff < s.size()) {
            if (s[pre] == s[suff]) {
                lps[suff] = pre + 1;
                pre++, suff++;
            } else {
                if (pre == 0) {
                    lps[suff] = 0;
                    suff++;
                } else {
                    pre = lps[pre - 1];
                }
            }
        }
    }

    bool KMP_MATCH(const string& haystack, const string& needle) {
        vector<int> lps(needle.size(), 0);
        lpsfind(lps, needle);
        int first = 0, second = 0;
        while (first < haystack.size() && second < needle.size()) {
            if (needle[second] == haystack[first]) {
                first++, second++;
            } else {
                if (second == 0) {
                    first++;
                } else {
                    second = lps[second - 1];
                }
            }
        }
        return second == needle.size();
    }

    int repeatedStringMatch(string a, string b) {
        int repeat = (b.size() + a.size() - 1) / a.size();
        string temp;
        temp.reserve((repeat + 1) * a.size());
        for (int i = 0; i < repeat; ++i) {
            temp += a;
        }
        if (KMP_MATCH(temp, b)) return repeat;
        temp += a;
        if (KMP_MATCH(temp, b)) return repeat + 1;
        return -1;
    }
};
